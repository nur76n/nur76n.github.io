---
layout: default
title: Python Deploy
nav_order: 80
---

## Python Deploy

Список команд:
```
useradd -s /bin/bash -G sudo -m python
echo "python ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/92-python
chmod 0440 /etc/sudoers.d/92-python

su - python

sudo apt-get install -y certbot nginx make build-essential \
  libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
  wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev \
  libffi-dev liblzma-dev postgresql libpq5 libpq-dev


sudo -u postgres psql
create user django_user;
\password django_user
create database django_db;
grant all privileges on database django_db to django_user;
\q

git clone https://github.com/pyenv/pyenv.git ~/.pyenv

cd ~/.pyenv && src/configure && make -C src

### Put these lines into ~/.profile before the part that sources ~/.bashrc:
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

### And put this line at the bottom of ~/.profile:
eval "$(pyenv init --path)"

logout
su - python

git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv
echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc

logout
su - python

pyenv install 3.7.1
pyenv global 3.7.1

git clone https://github.com/gothinkster/django-realworld-example-app
cd django-realworld-example-app

pyenv virtualenv 3.7.1 app
pyenv local app

pip install -r requirements.txt 
pip install psycopg2==2.8.6
pip install uwsgi
```

Меняем параметры подключения к БД conduit/settings.py и значения переменных STATIC_ROOT, ALLOWED_HOSTS
```
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'django_db',
        'USER': 'django_user',
        'PASSWORD': 'password1234',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

STATIC_ROOT = os.path.join(BASE_DIR, "static")

ALLOWED_HOSTS = ['nur76n-python.devops.rebrain.srwx.net']
python manage.py migrate

mkdir ./static

python manage.py collectstatic

python manage.py createsuperuser
```
Содержимое файла ~/django-realworld-example-app/django_uwsgi.ini
```
[uwsgi]
# full path to Django project's root directory
chdir            = /home/python/django-realworld-example-app/
# Django's wsgi file
module           = conduit.wsgi
# full path to python virtual env
home             = /home/python/.pyenv/versions/app
# enable uwsgi master process
master          = true
# maximum number of worker processes
processes       = 10
# the socket (use the full path to be safe
socket          = /home/python/django-realworld-example-app/django_uwsgi.sock
# socket permissions
chmod-socket    = 666
# clear environment on exit
vacuum          = true
# daemonize uwsgi and write messages into given log
# daemonize       = /home/python/django-realworld-example-app/uwsgi.log
```


Содержимое файла /etc/systemd/system/uwsgi@django.service
```
[Unit]
Description=uWSGI django
After=syslog.target

[Service]
ExecStart=/home/python/.pyenv/versions/app/bin/uwsgi --ini  /home/python/django-realworld-example-app/django_uwsgi.ini
# Requires systemd version 211 or newer
RuntimeDirectory=/home/python/django-realworld-example-app
Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target
```

```
sudo systemctl daemon-reload
sudo systemctl enable uwsgi@django.service
sudo systemctl start uwsgi@django.service
sudo systemctl status uwsgi@django.service
```


Содержимое файла ~/django-realworld-example-app/uwsgi_params
```
uwsgi_param  QUERY_STRING       $query_string;
uwsgi_param  REQUEST_METHOD     $request_method;
uwsgi_param  CONTENT_TYPE       $content_type;
uwsgi_param  CONTENT_LENGTH     $content_length;
uwsgi_param  REQUEST_URI        $request_uri;
uwsgi_param  PATH_INFO          $document_uri;
uwsgi_param  DOCUMENT_ROOT      $document_root;
uwsgi_param  SERVER_PROTOCOL    $server_protocol;
uwsgi_param  REQUEST_SCHEME     $scheme;
uwsgi_param  HTTPS              $https if_not_empty;
uwsgi_param  REMOTE_ADDR        $remote_addr;
uwsgi_param  REMOTE_PORT        $remote_port;
uwsgi_param  SERVER_PORT        $server_port;
uwsgi_param  SERVER_NAME        $server_name;
sudo rm /etc/nginx/sites-enabled/default
sudo systemctl stop nginx
sudo certbot certonly -n --standalone --agree-tos -m nur76n@mail.ru -d nur76n-python.devops.rebrain.srwx.net
Содержимое файла /etc/nginx/sites-enabled/django

# the upstream component nginx needs to connect to
upstream django {
    server unix:///home/python/django-realworld-example-app/django_uwsgi.sock;
}
# configuration of the server

server {
    listen 80;
    server_name nur76n-python.devops.rebrain.srwx.net;

    location / {
      return 301 https://$host$request_uri;
  }
}

server {
    listen      443 ssl;
    server_name nur76n-python.devops.rebrain.srwx.net;
    charset     utf-8;
    
    ssl_certificate /etc/letsencrypt/live/nur76n-python.devops.rebrain.srwx.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nur76n-python.devops.rebrain.srwx.net/privkey.pem; 

    location /static {
        alias /home/python/django-realworld-example-app/static;
    }
    # Send all non-media requests to the Django server.
    location / {
        uwsgi_pass  django;
        include     /home/python/django-realworld-example-app/uwsgi_params;
    }
}
```

```
sudo nginx -t
sudo systemctl start nginx
```