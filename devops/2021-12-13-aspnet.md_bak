---
layout: default
title: ASP.NET Deploy
nav_order: 80
---

## ASP.NET Deploy

Список команд:
```
apt install certbot nginx

wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb
rm packages-microsoft-prod.deb
sudo apt-get update;   sudo apt-get install -y apt-transport-https &&   sudo apt-get update &&   sudo apt-get install -y dotnet-sdk-5.0
sudo apt-get update;   sudo apt-get install -y apt-transport-https &&   sudo apt-get update &&   sudo apt-get install -y aspnetcore-runtime-5.0

sudo wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)"
sudo apt install -y mssql-server
/opt/mssql/bin/mssql-conf setup

curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
sudo apt update 
sudo ACCEPT_EULA=Y apt install mssql-tools unixodbc-dev
useradd -s /bin/bash -m -G sudo aspnet
su - aspnet
git clone https://github.com/dotnet-architecture/eShopOnWeb.git
cd eShopOnWeb
dotnet tool install --global dotnet-ef
```


Меняем параметры подключения к БД в файле appsettings.json
```
  "ConnectionStrings": {
    "CatalogConnection": "Server=localhost;Database=eshop_data;User Id=sa; Password=Passwd1234;",
    "IdentityConnection": "Server=localhost;Database=eshop_identity;User Id=sa; Password=Passwd1234;"
  }

```


```
dotnet restore
dotnet tool restore
dotnet ef database update -c catalogcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj
dotnet ef database update -c appidentitydbcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj

dotnet publish --configuration Release

logout
```
Создаем файл /etc/systemd/system/eshop_aspnet_app.service
```
[Unit]
Description=eShopOnWeb .NET Web App

[Service]
WorkingDirectory=/home/aspnet/eShopOnWeb/src/Web
ExecStart=/usr/bin/dotnet /home/aspnet/eShopOnWeb/src/Web/bin/Release/net5.0/Web.dll
Restart=always
# Restart service after 10 seconds if the dotnet service crashes:
RestartSec=10
KillSignal=SIGINT
SyslogIdentifier=dotnet-eshop
User=aspnet
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target
```


```
systemctl daemon-reload
systemctl enable eshop_aspnet_app.service
systemctl start eshop_aspnet_app.service
systemctl status eshop_aspnet_app.service
systemctl stop nginx
rm /etc/nginx/sites-enabled/default
certbot certonly -n --standalone --agree-tos -m nur76n@mail.ru -d nur76n-aspnet.devops.rebrain.srwx.net

```


Создаем файл /etc/nginx/sites-enabled/aspnet
```
server {
  listen 80;
  server_name nur76n-aspnet.devops.rebrain.srwx.net;

  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen        443 ssl;
  server_name   nur76n-aspnet.devops.rebrain.srwx.net;

  ssl_certificate /etc/letsencrypt/live/nur76n-aspnet.devops.rebrain.srwx.net/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/nur76n-aspnet.devops.rebrain.srwx.net/privkey.pem;


  location / {
    proxy_pass         https://127.0.0.1:5001;
    proxy_http_version 1.1;
    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection keep-alive;
    proxy_set_header   Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
  }
}

```


```
systemctl start nginx
```